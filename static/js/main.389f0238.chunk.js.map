{"version":3,"sources":["pages/Game.jsx","components/FeedbackButtons.jsx","components/FeedbackMessage.jsx","images/trivia.png","services/requestGravatar.js","features/player/playerSlice.js","components/Header.jsx","pages/Feedback.jsx","helper/helper.js","components/ButtonNext.jsx","components/ButtonsQuestions.jsx","components/BoxAnswers.jsx","components/Loading.jsx","components/Timer.jsx","features/game/gameSlice.js","services/requestToken.js","pages/Login.jsx","components/RankingValues.jsx","pages/Ranking.jsx","components/SelectSettings.jsx","pages/Settings.jsx","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["timeout","FeedbackButtons","handlePlayAgain","handleRanking","Box","sx","display","justifyContent","mt","Button","variant","onClick","mr","FeedbackMessage","assertions","score","getMessage","className","Typography","component","style","marginRight","getGravatar","email","hash","md5","toString","playerSlice","createSlice","name","initialState","reducers","addName","state","action","payload","addEmail","alterScore","resetInfo","selectName","player","selectEmail","selectAssertions","selectScore","actions","renderGravatar","alignItems","textAlign","src","alt","renderPlayerInfo","Header","history","useHistory","useSelector","Logo","alignSelf","Tooltip","title","IconButton","fontSize","push","renderPageSettings","getFeedbackMessage","redirectPage","route","Feedback","playerName","playerEmail","useEffect","playerRanking","picture","localStorage","getItem","JSON","parse","gravatarEmail","playerScore","ranking","setItem","stringify","saveRankingStorage","shuffleArray","arr","i","length","j","Math","floor","random","calcScore","timer","level","fetchQuestions","url","a","fetch","fetchData","json","result","b64ToUtf8","str","decodeURIComponent","atob","ButtonNext","isAnswered","handleClick","alterBorderColor","answer","correctAnswer","ButtonsQuestions","handleClickAnswer","time","value","disabled","border","getScore","timerAndScore","valueQuestion","dispatch","BoxAnswers","arrayQuestions","questionIndex","stopTimer","setIsAnswered","shuffledQuestions","correct_answer","difficulty","useDispatch","dataStorage","playerInfo","saveScoreStorage","timeAndScore","target","map","index","Loading","Timer","marginTop","getQuestions","createAsyncThunk","results","newResults","question","incorrect","incorrect_answers","correct","gameSlice","questions","entryPoint","alterUrl","extraReducers","fulfilled","selectUrl","game","selectQuestions","renderCategoryAndQuestion","questionObj","category","clearTimeout","Game","useState","setQuestionIndex","setTimer","decreaseNum","data","getPlayerInfo","setInterval","clearInterval","prevTimer","verifyIndexQuestion","requestToken","fetchTokenApi","response","token","validateData","test","saveTokenLocalStorage","startGame","savePlayerInfo","renderInputs","setName","setEmail","TextField","autoComplete","id","label","fullWidth","onChange","InputProps","startAdornment","InputAdornment","position","type","margin","Login","maxWidth","logo","endIcon","RankingValues","array","mb","ml","compare","b","Ranking","sort","SelectSettings","funcCategory","funcLevel","funcType","FormControl","width","InputLabel","Select","labelId","MenuItem","Settings","setCategory","setLevel","setType","paramsUrl","event","handleCategory","handleLevel","handleType","App","path","exact","Boolean","window","location","hostname","match","combineReducers","playerReducer","gameReducer","store","configureStore","reducer","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.389f0238.chunk.js","sourcesContent":["import { Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport BoxAnswers from '../components/BoxAnswers';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport Timer from '../components/Timer';\nimport { getQuestions, selectQuestions, selectUrl } from '../features/game/gameSlice';\nimport { addEmail, addName } from '../features/player/playerSlice';\nimport maxTimer, { b64ToUtf8, oneSecond } from '../helper/helper';\n\nlet timeout;\n\nconst getPlayerInfo = (dispatch) => {\n  if (localStorage.getItem('player')) {\n    const data = JSON.parse(localStorage.getItem('player'));\n    const { name, gravatarEmail } = data;\n    dispatch(addEmail(gravatarEmail));\n    dispatch(addName(name));\n  }\n};\n\nconst renderCategoryAndQuestion = (questionObj, timer) => {\n  const { category, question } = questionObj;\n  return (\n    <>\n      <Typography\n        sx={ { textAlign: 'center', mt: '10px' } }\n        data-testid=\"question-category\"\n        variant=\"h6\"\n        component=\"p\"\n      >\n        { b64ToUtf8(category) }\n\n      </Typography>\n      <Typography\n        sx={ { textAlign: 'center' } }\n        data-testid=\"question-text\"\n        variant=\"h6\"\n        component=\"p\"\n      >\n        { b64ToUtf8(question) }\n\n      </Typography>\n      <Timer timer={ timer } />\n    </>\n  );\n};\n\nconst stopTimer = () => clearTimeout(timeout);\n\nconst redirectPage = (history) => {\n  history.push('/feedback');\n};\n\nconst verifyIndexQuestion = (setQuestionIndex, setIsAnswered,\n  setTimer) => {\n  setQuestionIndex((prevTimer) => prevTimer + 1);\n  setIsAnswered(false);\n  setTimer(maxTimer);\n};\n\nconst Game = () => {\n  const dispatch = useDispatch();\n  const questions = useSelector(selectQuestions);\n  const url = useSelector(selectUrl);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [timer, setTimer] = useState(maxTimer);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const history = useHistory();\n\n  const decreaseNum = () => { setTimer(timer - 1); };\n\n  const alterQuestion = () => {\n    const MAX_QUESTIONS = 4;\n    if (questionIndex === MAX_QUESTIONS) {\n      redirectPage(history);\n    } else verifyIndexQuestion(setQuestionIndex, setIsAnswered, setTimer);\n  };\n\n  useEffect(() => {\n    dispatch(getQuestions(url));\n    getPlayerInfo(dispatch);\n  }, []);\n\n  useEffect(() => {\n    if (timer === 0) return;\n    timeout = setInterval(decreaseNum, oneSecond);\n    return () => clearInterval(timeout);\n  }, [timer]);\n\n  if (!questions.length > 0) return <Loading />;\n  return (\n    <>\n      <Header />\n      {renderCategoryAndQuestion(questions[questionIndex], timer)}\n      <BoxAnswers\n        arrayQuestions={ questions }\n        time={ timer }\n        questionIndex={ questionIndex }\n        stopTimer={ stopTimer }\n        handleClick={ alterQuestion }\n        isAnswered={ isAnswered }\n        setIsAnswered={ setIsAnswered }\n      />\n    </>);\n};\n\nexport default Game;\n","import { Button } from '@mui/material';\nimport { Box } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst FeedbackButtons = ({ handlePlayAgain, handleRanking }) => (\n  <Box\n    sx={ {\n      display: 'flex',\n      justifyContent: 'center',\n      mt: '10px',\n    } }\n  >\n    <Button\n      data-testid=\"btn-play-again\"\n      variant=\"contained\"\n      onClick={ handlePlayAgain }\n      sx={ { mr: '5px' } }\n    >\n      Play Again\n    </Button>\n    <Button\n      data-testid=\"btn-ranking\"\n      variant=\"contained\"\n      onClick={ handleRanking }\n    >\n      Ranking\n    </Button>\n  </Box>\n);\n\nFeedbackButtons.propTypes = {\n  handlePlayAgain: PropTypes.func.isRequired,\n  handleRanking: PropTypes.func.isRequired,\n};\n\nexport default FeedbackButtons;\n","import { Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst FeedbackMessage = ({ assertions, score, getMessage }) => (\n  <Box\n    className=\"box-feedback\"\n  >\n    <Typography\n      data-testid=\"feedback-text\"\n      variant=\"h6\"\n      component=\"p\"\n      style={ { marginRight: '5px' } }\n    >\n      {getMessage(assertions)}\n\n    </Typography>\n    <Typography\n      data-testid=\"feedback-total-score\"\n      variant=\"h6\"\n      component=\"p\"\n      style={ { marginRight: '5px' } }\n    >\n      {`Total Score: ${score}`}\n\n    </Typography>\n    <Typography\n      data-testid=\"feedback-total-question\"\n      variant=\"h6\"\n      component=\"p\"\n      style={ { marginRight: '5px' } }\n    >\n      {`Total Assertions: ${assertions}`}\n\n    </Typography>\n  </Box>\n);\n\nFeedbackMessage.propTypes = {\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  getMessage: PropTypes.func.isRequired,\n};\n\nexport default FeedbackMessage;\n","export default __webpack_public_path__ + \"static/media/trivia.7e9181d3.png\";","import md5 from 'crypto-js/md5';\n\nconst url = 'https://www.gravatar.com/avatar/';\n\nconst getGravatar = (email) => {\n  const hash = md5(email).toString();\n  return `${url}${hash}`;\n};\n\nexport default getGravatar;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst playerSlice = createSlice({\n  name: 'player',\n  initialState: {\n    name: '',\n    email: '',\n    assertions: 0,\n    score: 0,\n  },\n  reducers: {\n    addName(state, action) {\n      state.name = action.payload;\n    },\n    addEmail(state, action) {\n      state.email = action.payload;\n    },\n    alterScore(state, action) {\n      state.score = action.payload;\n      state.assertions += 1;\n    },\n    resetInfo(state) {\n      state.name = '';\n      state.email = '';\n      state.assertions = 0;\n      state.score = 0;\n    },\n  },\n});\n\nexport const selectName = (state) => state.player.name;\nexport const selectEmail = (state) => state.player.email;\nexport const selectAssertions = (state) => state.player.assertions;\nexport const selectScore = (state) => state.player.score;\n\nexport const { addName, addEmail, alterScore, resetInfo } = playerSlice.actions;\nexport default playerSlice.reducer;\n","import React from 'react';\nimport { IconButton, Tooltip, Typography } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport { useSelector } from 'react-redux';\nimport Settings from '@mui/icons-material/SettingsApplications';\nimport { useHistory } from 'react-router-dom';\nimport Logo from '../images/trivia.png';\nimport getGravatar from '../services/requestGravatar';\nimport { selectEmail, selectName, selectScore } from '../features/player/playerSlice';\n\nconst renderPageSettings = (history) => {\n  history.push('/settings');\n};\n\nconst renderGravatar = (email) => (\n  <Box\n    sx={ {\n      display: 'flex',\n      alignItems: 'center',\n      textAlign: 'center',\n      justifyContent: 'center',\n    } }\n  >\n    <img\n      data-testid=\"header-profile-picture\"\n      src={ getGravatar(email) }\n      alt=\"img-gravatar\"\n    />\n  </Box>\n);\n\nconst renderPlayerInfo = (name, score) => (\n\n  <Box\n    component=\"section\"\n  >\n    <Typography\n      data-testid=\"player-name\"\n      variant=\"h6\"\n      component=\"p\"\n      style={ { marginRight: '5px' } }\n    >\n      {`Player Name: ${name}`}\n\n    </Typography>\n    <Typography\n      data-testid=\"player-score\"\n      variant=\"h6\"\n      component=\"p\"\n    >\n      {`Score:${score}`}\n\n    </Typography>\n  </Box>\n\n);\n\nconst Header = () => {\n  const history = useHistory();\n  const email = useSelector(selectEmail);\n  const name = useSelector(selectName);\n  const score = useSelector(selectScore);\n\n  return (\n    <header>\n      <Box\n        sx={ {\n          display: 'flex',\n          alignItems: 'center',\n          textAlign: 'center',\n          justifyContent: 'space-between' } }\n      >\n        {renderGravatar(email)}\n        <img\n          className=\"logo\"\n          src={ Logo }\n          style={ { alignSelf: 'flex-end' } }\n          alt=\"logo-trivia\"\n        />\n        <Tooltip title=\"Settings\">\n          <IconButton\n            aria-label=\"configuration\"\n            fontSize=\"large\"\n            onClick={ () => renderPageSettings(history) }\n          >\n            <Settings fontSize=\"large\" />\n          </IconButton>\n        </Tooltip>\n      </Box>\n      {renderPlayerInfo(name, score)}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport FeedbackButtons from '../components/FeedbackButtons';\nimport FeedbackMessage from '../components/FeedbackMessage';\nimport Header from '../components/Header';\nimport { selectAssertions, selectEmail,\n  selectName, selectScore } from '../features/player/playerSlice';\nimport getGravatar from '../services/requestGravatar';\n\nconst getFeedbackMessage = (assertions) => {\n  const MIN_RESULT = 3;\n  if (assertions < MIN_RESULT) {\n    return '\"Could be better...\"';\n  }\n  if (assertions >= MIN_RESULT) {\n    return '\"Nice job!\"';\n  }\n};\n\nconst redirectPage = (history, route) => {\n  history.push(route);\n};\n\nconst Feedback = () => {\n  const assertions = useSelector(selectAssertions);\n  const score = useSelector(selectScore);\n  const history = useHistory();\n  const playerName = useSelector(selectName);\n  const playerEmail = useSelector(selectEmail);\n\n  const saveRankingStorage = () => {\n    const playerRanking = [\n      { name: playerName, score, picture: getGravatar(playerEmail) }];\n\n    if (localStorage.getItem('ranking')) {\n      const { name, gravatarEmail, score: playerScore } = JSON\n        .parse(localStorage.getItem('player'));\n\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      ranking.push({ name, score: playerScore, picture: getGravatar(gravatarEmail) });\n      localStorage.setItem('ranking', JSON.stringify(ranking));\n      return;\n    }\n    localStorage.setItem('ranking', JSON.stringify(playerRanking));\n  };\n\n  useEffect(() => {\n    saveRankingStorage();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <FeedbackMessage\n        score={ score }\n        assertions={ assertions }\n        getMessage={ getFeedbackMessage }\n      />\n      <FeedbackButtons\n        handlePlayAgain={ () => redirectPage(history, '/') }\n        handleRanking={ () => redirectPage(history, '/ranking') }\n      />\n    </>\n  );\n};\n\nexport default Feedback;\n","export const maxTimer = 30;\nexport const oneSecond = 1000;\n\n// consulted page https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n\nexport const shuffleArray = (arr) => {\n  for (let i = arr.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n\nexport const calcScore = (timer, level) => {\n  const defaultPoint = 10;\n  const hardValue = 3;\n\n  switch (level) {\n  case 'easy':\n    return defaultPoint + (timer * 1);\n  case 'medium':\n    return defaultPoint + (timer * 2);\n  case 'hard':\n    return defaultPoint + (timer * hardValue);\n  default:\n    break;\n  }\n};\n\nexport const fetchQuestions = async (url) => {\n  const fetchData = await fetch(url);\n  const result = await fetchData.json();\n  return result;\n};\n\nexport const b64ToUtf8 = (str) => decodeURIComponent(atob(str));\n\nexport default maxTimer;\n","import { Button } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst ButtonNext = ({ isAnswered, handleClick }) => (\n  <Button\n    className=\"btn-next\"\n    data-testid=\"btn-next\"\n    sx={ {\n      display: isAnswered ? 'initial' : 'none',\n    } }\n    variant=\"contained\"\n    onClick={ handleClick }\n  >\n    Next\n  </Button>\n);\n\nButtonNext.propTypes = {\n  isAnswered: PropTypes.bool.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default ButtonNext;\n","import { Box, Button } from '@mui/material';\nimport React from 'react';\nimport Proptypes from 'prop-types';\nimport { b64ToUtf8 } from '../helper/helper';\n\nconst alterBorderColor = (answer, correctAnswer) => {\n  if (answer === correctAnswer) {\n    return '3px solid rgb(6, 240, 15)';\n  }\n  return '3px solid rgb(255, 0, 0)';\n};\n\nconst ButtonsQuestions = (\n  { answer, correctAnswer, handleClickAnswer, time, isAnswered },\n) => (\n  <Box className=\"box-answers\">\n    <Button\n      data-testid={ answer === correctAnswer\n        ? 'correct-answer'\n        : 'wrong-answer' }\n      value={ answer === correctAnswer\n        ? 'correct'\n        : 'wrong' }\n      onClick={ handleClickAnswer }\n      disabled={ time === 0 || isAnswered }\n      sx={ {\n        border: isAnswered ? alterBorderColor(answer, correctAnswer) : null,\n      } }\n    >\n      {b64ToUtf8(answer)}\n    </Button>\n  </Box>\n);\n\nButtonsQuestions.propTypes = {\n  answer: Proptypes.string.isRequired,\n  correctAnswer: Proptypes.string.isRequired,\n  handleClickAnswer: Proptypes.func.isRequired,\n  time: Proptypes.number.isRequired,\n  isAnswered: Proptypes.bool.isRequired,\n};\n\nexport default ButtonsQuestions;\n","import Proptypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { alterScore, selectAssertions,\n  selectScore } from '../features/player/playerSlice';\nimport { b64ToUtf8, calcScore } from '../helper/helper';\nimport ButtonNext from './ButtonNext';\nimport ButtonsQuestions from './ButtonsQuestions';\n\nconst getScore = async (timerAndScore, level, valueQuestion, dispatch) => {\n  const { time, score } = timerAndScore;\n  if (valueQuestion === 'correct') {\n    dispatch(alterScore(calcScore(time, b64ToUtf8(level)) + score));\n  }\n};\n\nconst saveScoreStorage = (assertions, score) => {\n  const dataStorage = JSON.parse(localStorage.getItem('player'));\n  const playerInfo = { ...dataStorage, assertions, score };\n  localStorage.setItem('player', JSON.stringify(playerInfo));\n};\n\nconst BoxAnswers = ({ arrayQuestions, time, questionIndex,\n  stopTimer, handleClick, isAnswered, setIsAnswered }) => {\n  const { shuffledQuestions } = arrayQuestions[questionIndex];\n  const correctAnswer = arrayQuestions[questionIndex].correct_answer;\n  const level = arrayQuestions[questionIndex].difficulty;\n  const score = useSelector(selectScore);\n  const assertions = useSelector(selectAssertions);\n  const dispatch = useDispatch();\n\n  useEffect(() => saveScoreStorage(assertions, score), [score]);\n\n  const timeAndScore = {\n    time,\n    score,\n  };\n\n  const handleClickAnswer = ({ target }) => {\n    const { value } = target;\n    stopTimer();\n    getScore(timeAndScore, level, value, dispatch);\n    setIsAnswered(true);\n  };\n\n  return (\n    <>\n      {shuffledQuestions.map((answer, index) => (\n        <ButtonsQuestions\n          key={ index }\n          answer={ answer }\n          correctAnswer={ correctAnswer }\n          handleClickAnswer={ handleClickAnswer }\n          isAnswered={ isAnswered }\n          time={ time }\n        />\n\n      ))}\n      <ButtonNext\n        isAnswered={ isAnswered }\n        handleClick={ handleClick }\n      />\n    </>\n  );\n};\n\nBoxAnswers.propTypes = {\n  arrayQuestions: Proptypes.arrayOf(Proptypes.object).isRequired,\n  questionIndex: Proptypes.number.isRequired,\n  time: Proptypes.number.isRequired,\n  stopTimer: Proptypes.func.isRequired,\n  handleClick: Proptypes.func.isRequired,\n  setIsAnswered: Proptypes.func.isRequired,\n  isAnswered: Proptypes.bool.isRequired,\n};\n\nexport default BoxAnswers;\n","import { Typography } from '@mui/material';\nimport React from 'react';\nimport Header from './Header';\n\nconst Loading = () => (\n  <>\n    <Header />\n    <Typography\n      data-testid=\"question-category\"\n      variant=\"h4\"\n      component=\"p\"\n    >\n      Loading...Loading...Loading\n    </Typography>\n  </>\n);\n\nexport default Loading;\n","import { Typography } from '@mui/material';\nimport Proptypes from 'prop-types';\nimport React from 'react';\n\nconst Timer = ({ timer }) => (\n  <Typography\n    sx={ {\n      textAlign: 'center',\n      marginTop: '25px',\n    } }\n    variant=\"h3\"\n    component=\"p\"\n  >\n    {timer}\n\n  </Typography>\n);\n\nTimer.propTypes = {\n  timer: Proptypes.number.isRequired,\n};\n\nexport default Timer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchQuestions, shuffleArray } from '../../helper/helper';\n\nexport const getQuestions = createAsyncThunk(\n  'game/getQuestions',\n  async (url) => {\n    const result = await fetchQuestions(url);\n    const { results } = result;\n    const newResults = results.map((question) => {\n      const { incorrect_answers: incorrect, correct_answer: correct } = question;\n      const alteredQuestion = { ...question,\n        shuffledQuestions: shuffleArray([...incorrect, correct]) };\n      return alteredQuestion;\n    });\n    return newResults;\n  },\n);\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    questions: [],\n    entryPoint: 'https://opentdb.com/api.php?amount=5&encode=base64',\n  },\n  reducers: {\n    alterUrl(state, action) {\n      state.entryPoint = action.payload;\n    },\n  },\n  extraReducers: {\n    [getQuestions.fulfilled]: (state, { payload }) => {\n      state.questions = payload;\n    },\n  },\n\n});\nexport const selectUrl = (state) => state.game.entryPoint;\nexport const selectQuestions = (state) => state.game.questions;\nexport const { alterUrl } = gameSlice.actions;\nexport default gameSlice.reducer;\n","const urlToken = 'https://opentdb.com/api_token.php?command=request';\n\nconst requestToken = async () => {\n  const fetchTokenApi = await fetch(urlToken);\n  const response = await fetchTokenApi.json();\n  return response.token;\n};\n\nrequestToken();\n\nexport default requestToken;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport SendIcon from '@mui/icons-material/Send';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport MailIcon from '@mui/icons-material/Mail';\nimport Box from '@mui/material/Box';\nimport { useDispatch } from 'react-redux';\nimport { addName, addEmail, resetInfo } from '../features/player/playerSlice';\nimport logo from '../images/trivia.png';\nimport '../App.css';\nimport requestToken from '../services/requestToken';\n\nconst validateData = (name, email) => {\n  const regEX = /\\S+@\\S+\\.\\S+/;\n  return (!(regEX.test(email) && name.length > 0));\n};\n\nconst saveTokenLocalStorage = async () => {\n  const token = await requestToken();\n  localStorage.setItem('token', JSON.stringify(token));\n};\n\nconst savePlayerInfo = (name, email) => {\n  const playerInfo = { name, gravatarEmail: email };\n  localStorage.setItem('player', JSON.stringify(playerInfo));\n};\n\nconst startGame = (history, name, email, dispatch) => {\n  saveTokenLocalStorage();\n  savePlayerInfo(name, email);\n  dispatch(addName(name));\n  dispatch(addEmail(email));\n  history.push('/game');\n};\n\nconst renderInputs = (name, setName, email, setEmail) => (\n  <>\n    <TextField\n      autoComplete=\"off\"\n      id=\"outlined-name\"\n      label=\"Player Name\"\n      variant=\"standard\"\n      value={ name }\n      fullWidth\n      onChange={ ({ target }) => setName(target.value) }\n      InputProps={ {\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <AccountCircle />\n          </InputAdornment>\n        ),\n      } }\n    />\n    <TextField\n      autoComplete=\"off\"\n      type=\"email\"\n      id=\"outlined-email\"\n      label=\"E-mail\"\n      variant=\"standard\"\n      value={ email }\n      margin=\"normal\"\n      fullWidth\n      onChange={ ({ target }) => setEmail(target.value) }\n      InputProps={ {\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <MailIcon />\n          </InputAdornment>\n        ),\n      } }\n    />\n  </>\n);\n\nconst Login = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(resetInfo());\n  }, []);\n\n  return (\n    <Box\n      component=\"section\"\n      className=\"section-login\"\n      sx={ { maxWidth: 'sm' } }\n    >\n      <img\n        alt=\"logo-trivia\"\n        className=\"img-logo\"\n        src={ logo }\n      />\n      {renderInputs(name, setName, email, setEmail)}\n      <Button\n        variant=\"contained\"\n        endIcon={ <SendIcon /> }\n        disabled={ validateData(name, email) }\n        onClick={ () => startGame(history, name,\n          email, dispatch) }\n      >\n        Play\n      </Button>\n    </Box>\n  );\n};\n\nexport default Login;\n","import { Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport Proptypes from 'prop-types';\n\nconst RankingValues = ({ array }) => (\n  <>\n    <Typography\n      data-testid=\"ranking-title\"\n      variant=\"h1\"\n      component=\"p\"\n      mb=\"0.2em\"\n    >\n      Ranking\n    </Typography>\n    { array.map((player, index) => (\n      <Box\n        key={ index }\n        className=\"box-ranking-data\"\n      >\n        <img alt=\"img-player\" src={ player.picture } />\n        <Typography\n          data-testid={ `player-name-${index}` }\n          variant=\"h4\"\n          component=\"p\"\n          ml=\"0.5em\"\n        >\n          {player.name}\n\n        </Typography>\n        <Typography\n          data-testid={ `player-score-${index}` }\n          variant=\"h4\"\n          component=\"p\"\n          ml=\"0.3em\"\n        >\n          {player.score}\n\n        </Typography>\n      </Box>\n    ))}\n  </>\n\n);\n\nRankingValues.propTypes = {\n  array: Proptypes.arrayOf(Proptypes.shape({\n    name: Proptypes.string,\n    picture: Proptypes.string,\n    score: Proptypes.number,\n  })).isRequired,\n};\n\nexport default RankingValues;\n","import { Box, Button } from '@mui/material';\nimport React from 'react';\nimport SendIcon from '@mui/icons-material/Send';\nimport { useHistory } from 'react-router-dom';\nimport RankingValues from '../components/RankingValues';\n\nconst compare = (a, b) => {\n  const negative = -1;\n  if (a.score < b.score) return 1;\n  if (a.score > b.score) return negative;\n  return 0;\n};\n\nconst Ranking = () => {\n  const history = useHistory();\n  const ranking = JSON.parse(localStorage.getItem('ranking'));\n  ranking.sort(compare);\n  return (\n    <Box\n      className=\"box-ranking\"\n    >\n      <RankingValues array={ ranking } />\n      <Button\n        data-testid=\"btn-go-home\"\n        variant=\"contained\"\n        endIcon={ <SendIcon /> }\n        onClick={ () => history.push('/') }\n        sx={ { mt: '5px' } }\n      >\n        Play again\n      </Button>\n    </Box>\n  );\n};\n\nexport default Ranking;\n","import React from 'react';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { Box } from '@mui/material';\nimport Proptypes from 'prop-types';\n\nconst SelectSettings = (\n  { category, funcCategory, level, funcLevel, type, funcType },\n) => (\n  <Box className=\"box-settings\">\n    <FormControl variant=\"standard\" sx={ { width: '50%' } }>\n      <InputLabel id=\"category\">Category</InputLabel>\n      <Select\n        labelId=\"category\"\n        value={ category }\n        onChange={ funcCategory }\n        label=\"Category\"\n      >\n        <MenuItem value=\"\">Default</MenuItem>\n        <MenuItem value=\"9\">General Knowledge</MenuItem>\n        <MenuItem value=\"10\">Entertainment: Books</MenuItem>\n        <MenuItem value=\"11\">Entertainment: Film</MenuItem>\n        <MenuItem value=\"12\">Entertainment: Music</MenuItem>\n        <MenuItem value=\"14\">Entertainment: Television</MenuItem>\n        <MenuItem value=\"15\">Entertainment: Video Games</MenuItem>\n      </Select>\n    </FormControl>\n    <FormControl variant=\"standard\" sx={ { width: '50%' } }>\n      <InputLabel id=\"level\">Difficult</InputLabel>\n      <Select\n        labelId=\"level\"\n        value={ level }\n        onChange={ funcLevel }\n        label=\"Difficult\"\n      >\n        <MenuItem value=\"\">Default</MenuItem>\n        <MenuItem value=\"easy\">Easy</MenuItem>\n        <MenuItem value=\"medium\">Medium</MenuItem>\n        <MenuItem value=\"hard\">Hard</MenuItem>\n      </Select>\n    </FormControl>\n    <FormControl variant=\"standard\" sx={ { width: '50%' } }>\n      <InputLabel id=\"type\">Type</InputLabel>\n      <Select\n        labelId=\"type\"\n        value={ type }\n        onChange={ funcType }\n        label=\"Difficult\"\n      >\n        <MenuItem value=\"\">Default</MenuItem>\n        <MenuItem value=\"multiple\">Multiple Choice</MenuItem>\n        <MenuItem value=\"boolean\">True/False</MenuItem>\n      </Select>\n    </FormControl>\n  </Box>\n);\n\nSelectSettings.propTypes = {\n  category: Proptypes.string.isRequired,\n  funcCategory: Proptypes.func.isRequired,\n  level: Proptypes.string.isRequired,\n  funcLevel: Proptypes.func.isRequired,\n  type: Proptypes.string.isRequired,\n  funcType: Proptypes.func.isRequired,\n};\n\nexport default SelectSettings;\n","import { Button, Typography } from '@mui/material';\nimport React, { useState } from 'react';\nimport SendIcon from '@mui/icons-material/Send';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport SelectSettings from '../components/SelectSettings';\nimport { alterUrl } from '../features/game/gameSlice';\n\nconst handleCategory = ({ target }, setCategory) => {\n  const { value } = target;\n  setCategory(value);\n};\nconst handleLevel = ({ target }, setLevel) => {\n  const { value } = target;\n  setLevel(value);\n};\nconst handleType = ({ target }, setType) => {\n  const { value } = target;\n  setType(value);\n};\n\nconst redirectPage = async (dispatch, url, history) => {\n  dispatch(alterUrl(url));\n  history.push('/');\n};\n\nconst Settings = () => {\n  const [category, setCategory] = useState('');\n  const [level, setLevel] = useState('');\n  const [type, setType] = useState('');\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const paramsUrl = `category=${category}&difficulty=${level}&type=${type}`;\n  const url = `https://opentdb.com/api.php?amount=5&encode=base64&${paramsUrl}`;\n\n  return (\n    <>\n      <Typography\n        variant=\"h1\"\n        component=\"header\"\n        style={ { textAlign: 'center' } }\n      >\n        Settings\n      </Typography>\n      <SelectSettings\n        category={ category }\n        funcCategory={ (event) => handleCategory(event, setCategory) }\n        level={ level }\n        funcLevel={ (event) => handleLevel(event, setLevel) }\n        type={ type }\n        funcType={ (event) => handleType(event, setType) }\n      />\n      <Button\n        className=\"btn-settings\"\n        variant=\"contained\"\n        endIcon={ <SendIcon /> }\n        onClick={ () => redirectPage(dispatch, url, history) }\n      >\n        Apply and Play\n      </Button>\n    </>\n\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Feedback from './pages/Feedback';\nimport Game from './pages/Game';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\nimport Settings from './pages/Settings';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport playerReducer from '../features/player/playerSlice';\nimport gameReducer from '../features/game/gameSlice';\n\nexport default combineReducers({\n  player: playerReducer,\n  game: gameReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from '../reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}